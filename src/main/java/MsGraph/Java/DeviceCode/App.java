/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package MsGraph.Java.DeviceCode;

import java.util.Collections;
import java.util.Set;
import java.util.function.Consumer;

import com.microsoft.aad.msal4j.DeviceCode;
import com.microsoft.aad.msal4j.DeviceCodeFlowParameters;
import com.microsoft.aad.msal4j.IAccount;
import com.microsoft.aad.msal4j.IAuthenticationResult;
import com.microsoft.aad.msal4j.MsalException;
import com.microsoft.aad.msal4j.PublicClientApplication;
import com.microsoft.aad.msal4j.SilentParameters;

public class App {

    private final static String CLIENT_ID = "";
    private final static String AUTHORITY = "https://login.microsoftonline.com/common/";
    private final static Set<String> SCOPES = Collections.singleton("");
    public static void main(String[] args) throws Exception {
        IAuthenticationResult authResult = authenticate();
        System.out.println("Access token: " + authResult.accessToken());
        System.out.println("Id token: " + authResult.idToken());
        System.out.println("Account username: " + authResult.account().username());
    }

    public static IAuthenticationResult authenticate() throws Exception{
        TokenCache tokenCache = new TokenCache("sample_cache.json");

        PublicClientApplication pca = PublicClientApplication.builder(CLIENT_ID)
                .authority(AUTHORITY)
                .setTokenCacheAccessAspect(tokenCache)
                .build();

        Set<IAccount> accountsInCache = pca.getAccounts().join();
        IAccount account = null;
        if (accountsInCache.iterator().hasNext()){
            account = accountsInCache. iterator().next();
        }
        IAuthenticationResult result = null;
        try {
            SilentParameters silentParameters = SilentParameters
            .builder(SCOPES, account)
            .build();

            result = pca.acquireTokenSilently(silentParameters).join();
        } catch (Exception ex){
            if (ex.getCause() instanceof MsalException || account == null) {

                Consumer<DeviceCode> deviceCodeConsumer = (DeviceCode deviceCode) ->
                        System.out.println(deviceCode.message());

                DeviceCodeFlowParameters parameters =
                        DeviceCodeFlowParameters
                                .builder(SCOPES, deviceCodeConsumer)
                                .build();

                // Try to acquire a token via device code flow. If successful, you should see
                // the token and account information printed out to console, and the sample_cache.json
                // file should have been updated with the latest tokens.
                result = pca.acquireToken(parameters).join();
            } else {
                throw ex;
            }
        }
        return result;
    }
}
